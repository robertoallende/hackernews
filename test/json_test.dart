import 'package:flutter_test/flutter_test.dart';
import 'package:hn_app/src/article.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  test("parses topstories.json", () {
    const jsonString =
        "[ 21103683, 21104176, 21100274, 21104540, 21104414, 21095766, 21103109, 21103279, 21103345, 21093512, 21099996, 21102257, 21100970, 21101478, 21102408, 21087901, 21093129, 21096941, 21102256, 21102642, 21102560, 21102245, 21101065, 21100588, 21103229, 21103505, 21101083, 21099921, 21100971, 21101351, 21103768, 21082535, 21103745, 21100404, 21103796, 21096653, 21100128, 21099771, 21101715, 21100202, 21099344, 21103647, 21088425, 21099918, 21103853, 21103040, 21100734, 21099871, 21102621, 21094231, 21103027, 21102109, 21103544, 21099110, 21099734, 21102403, 21100196, 21102166, 21100210, 21100048, 21097110, 21103706, 21098942, 21096062, 21096679, 21099778, 21101027, 21102432, 21100377, 21099658, 21081756, 21090685, 21092528, 21086331, 21099205, 21095164, 21095821, 21085931, 21086031, 21104324, 21095448, 21093727, 21096864, 21100117, 21094814, 21095155, 21086461, 21095747, 21095159, 21086035, 21097963, 21095438, 21093003, 21085171, 21100233, 21085828, 21103086, 21095222, 21099824, 21086866, 21090288, 21099724, 21096154, 21094040, 21092698, 21082757, 21097723, 21093907, 21103644, 21082845, 21098728, 21098979, 21093729, 21096521, 21085495, 21085603, 21085388, 21093636, 21100321, 21085912, 21099170, 21080132, 21097706, 21080606, 21091611, 21099468, 21082181, 21101178, 21087383, 21090933, 21095199, 21097139, 21095554, 21097417, 21084873, 21091576, 21087821, 21091221, 21085736, 21086345, 21093784, 21080346, 21095270, 21095863, 21098125, 21091729, 21094894, 21085749, 21101677, 21079908, 21091597, 21096912, 21093347, 21085940, 21096902, 21089808, 21089927, 21078070, 21091180, 21086666, 21081098, 21097131, 21086117, 21089825, 21085651, 21091193, 21091616, 21079968, 21079706, 21099669, 21082890, 21092596, 21085720, 21080135, 21088046, 21080512, 21079944, 21085946, 21084748, 21085214, 21100843, 21092855, 21081060, 21086927, 21085989, 21095179, 21098622, 21082625, 21092365, 21097035, 21080271, 21078068, 21082523, 21084832, 21095430, 21091219, 21097553, 21100973, 21085588, 21099045, 21083620, 21087941, 21099009, 21085323, 21080305, 21092770, 21082994, 21095700, 21098035, 21079841, 21097942, 21083850, 21088690, 21079643, 21083173, 21082123, 21097204, 21089707, 21088921, 21089204, 21100901, 21079844, 21080832, 21080212, 21078183, 21080090, 21081917, 21099530, 21083092, 21087980, 21084209, 21089075, 21084317, 21079242, 21083709, 21101344, 21098038, 21101288, 21101219, 21094666, 21097834, 21077546, 21099810, 21084060, 21097787, 21077943, 21080308, 21096952, 21099609, 21092063, 21085751, 21085519, 21080361, 21088648, 21096357, 21099695, 21077275, 21098658, 21100265, 21078921, 21095775, 21084254, 21081811, 21079896, 21095272, 21079831, 21098140, 21099313, 21077195, 21089894, 21086013, 21083017, 21098631, 21082324, 21086664, 21092136, 21080719, 21083800, 21097808, 21091240, 21098282, 21086736, 21085727, 21085546, 21090837, 21098070, 21096432, 21099234, 21099175, 21082185, 21081570, 21089330, 21085648, 21085361, 21097027, 21084867, 21079745, 21088583, 21095483, 21084423, 21097923, 21084224, 21095309, 21096762, 21097792, 21097060, 21085969, 21082423, 21082263, 21085934, 21093966, 21091974, 21081300, 21096478, 21078577, 21095476, 21086899, 21086749, 21087091, 21086483, 21077634, 21085927, 21085631, 21085492, 21086006, 21094640, 21094547, 21082359, 21092973, 21078319, 21093822, 21082698, 21095431, 21081444, 21084136, 21088846, 21091725, 21094647, 21080977, 21091457, 21097212, 21094343, 21080588, 21080204, 21093723, 21089000, 21081307, 21092890, 21092467, 21096083, 21089863, 21091861, 21080007, 21095378, 21094988, 21094086, 21078937, 21090126, 21078758, 21083272, 21089893, 21093564, 21080513, 21093525, 21077354, 21085705, 21092641, 21083979, 21097566, 21082702, 21080072, 21079052, 21082331, 21091081, 21084218, 21088225, 21085272, 21088108, 21086269, 21087674, 21087609, 21077138, 21083046, 21082199, 21081969, 21086329, 21085960, 21080766, 21080260, 21086077, 21078073, 21088396, 21085955, 21080598, 21077392, 21082871, 21087897, 21082326, 21081827, 21081736, 21081592, 21081537, 21087518, 21080570, 21081067, 21086497, 21080075, 21077656, 21085311, 21085018, 21084595, 21077339, 21084073, 21084028, 21078103, 21082215, 21081859, 21093108, 21077474, 21077345, 21077193, 21077182, 21079852, 21079832, 21079865, 21078694, 21077569, 21101721, 21083255, 21077844, 21079928, 21103060, 21079380, 21077736, 21082381, 21082422, 21091022, 21091188, 21103133, 21086335, 21077296, 21100983, 21100289 ]";
    var stories = parseTopStories(jsonString);
    expect(stories.first, 21103683);
  });

  test("parses item.json", () {
    const jsonString =
        """{"by" : "rahuldottech", "descendants" : 154, "id" : 21103683,"kids" : [ 21104333, 21104490, 21104074, 21104256, 21104492, 21104148, 21104260, 21104709, 21104554, 21104163, 21104699, 21104196, 21104638, 21104156, 21104079, 21104132, 21104681, 21104472, 21104184, 21104449, 21104639, 21104528, 21104620, 21104147, 21104495, 21104411, 21104264, 21104633, 21104190, 21104473, 21104525, 21104228, 21104419, 21104390, 21104342 ],"score" : 340,"time" : 1569712313, "title" : "Microsoft has removed the use offline account option when installing Windows","type" : "story","url" : "https://www.reddit.com/r/Windows10/comments/daim1y/ms_has_removed_the_use_offline_account_option/"}""";
    var article = parseArticle(jsonString);
    expect(article.by, "rahuldottech");
    expect(article.title,
        "Microsoft has removed the use offline account option when installing Windows");
  });

  // On real world you may want to use overrides instead of a real http call
  test("parses item.json over a network", () async {
    final url =
        'https://hacker-news.firebaseio.com/v0/beststories.json?print=pretty';
    final res = await http.get(url);
    if (res.statusCode == 200) {
      final idList = json.decode(res.body);
      if (idList.isNotEmpty) {
        final storyUrl =
            'https://hacker-news.firebaseio.com/v0/item/${idList.first}.json';
        final storyRes = await http.get(storyUrl);
        if (res.statusCode == 200) {
          expect(parseArticle(storyRes.body), isNotNull);
        }
      }
    }
  });
}
